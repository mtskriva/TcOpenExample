<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TcoPlsPaletizator" Id="{169856dd-165c-43ca-8ea1-1e351d34c5c9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoPlsPaletizator EXTENDS TcoCore.TcoComponent
VAR_INPUT
	inSafeCondition:BOOL;
	inDoorOpen:BOOL;
END_VAR

VAR_OUTPUT
END_VAR
VAR
	 {attribute addProperty Name "<#Config#>"}
	_config:TcoPlsPaletizator_Config_v_1_x_x;
	 {attribute addProperty Name "<#Status#>"}
    {attribute clr [ReadOnly()]}
	_status:TcoPlsPaletizator_Status_v_1_x_x;
	 {attribute addProperty Name "<#Control#>"}
	_control:TcoPlsPaletizator_Control_v_1_x_x;
	
	 {attribute addProperty Name "<#Components#>"}
    _components:TcoPlsPaletizator_Components:= (Parent := THIS^);
	
	{attribute addProperty Name "<#Poziadavka novy blister#>"}
	_feedNewBlisterTask : TcoFeedingSequenceTask(THIS^);
	{attribute addProperty Name "<#Poziadavka vylozenie blistera#>"}
	_throwBlisterTask :  TcoFeedingSequenceTask(THIS^);
	{attribute addProperty Name "<#Poziadavka obsluhy vystupny buffer#>"}
	_hanldeOutBufferTask :  TcoFeedingSequenceTask(THIS^);


	
	{attribute addProperty Name "<#Restore#>"}
	_restoreTask:TcoCore.TcoTask(THIS^);

	_blinker:TcoBlinker(THIS^);
	restoreDone: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_status.SafeCondition:=inSafeCondition;
_status.EntryBufferEmpty:=NOT Components.I3_PresentBlistersInBufferEmpty.Signal;
_status.BlisterReady:= Components.I4_PresentBlisterInWorkingPos.Signal ;
_status.OutBufferFull:= Components.I8_OutBlistersBufferIsFull.Signal;

_feedNewBlisterTask.Enabled :=NOT _throwBlisterTask.Busy;
IF(_feedNewBlisterTask.Execute())THEN
	SequenceIncomingBlister(refSequenceTask:=_feedNewBlisterTask );
END_IF;

_throwBlisterTask.Enabled :=NOT _feedNewBlisterTask.Busy;
IF(_throwBlisterTask.Execute())THEN
	SequenceOutgoingBlister(refSequenceTask:=_throwBlisterTask);
END_IF;

_hanldeOutBufferTask.Enabled :=TRUE;
IF(_hanldeOutBufferTask.Execute())THEN
	SequenceOutgoingBuffer(refSequenceTask:=_hanldeOutBufferTask);
END_IF;



//*************RESTORE********************

_restoreTask.Enabled := TRUE;
IF _restoreTask.Execute() THEN
	Restore();
	restoreDone:= Components.P3_HorizontalSepareEntryBlisters.MoveToWork().Done AND (Components.P10_HoldEntrySepareOutBlister.MoveToHome().Done or _config.SepareBlistersAtEntryInactive)
		AND_THEN (Components.P1_VerticalSepareEntryBlisters.MoveToHome().Done AND Components.P2_VerticalSepareEntryBlisters.MoveToHome().Done)
		AND_THEN (Components.P5_HorizontalSepareOutBlisters.MoveToHome().Done AND_THEN Components.P6_VerticalSepareOutBlister.MoveToHome().Done)
		AND_THEN  Components.P4_FeedEntryBlister.MoveToHome().Done;
		
	
	_restoreTask.DoneWhen(restoreDone);
END_IF
//****************************************


]]></ST>
    </Implementation>
    <Folder Name="Operations" Id="{0c0957d1-3b6f-4285-b178-15a13959ea6e}" />
    <Folder Name="Tasks" Id="{a196491f-d442-477f-98ea-f46f8678ab08}" />
    <Property Name="Components" Id="{48021fbf-edf4-4fae-88bb-ac3bc4a00c78}">
      <Declaration><![CDATA[PROPERTY Components : REFERENCE TO TcoPlsPaletizator_Components
]]></Declaration>
      <Get Name="Get" Id="{f92ae39f-dc95-45fc-a083-4c728e3eba50}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Components ref=_components;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Config" Id="{888a0495-4309-4973-ba0f-09f2d319a6a8}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the configuration of the MTS Pls feeder. 					
		</summary>			
	</docu>	
~*)
PROPERTY Config : REFERENCE TO TcoPlsPaletizator_Config_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{cee95d2a-5ebb-46d8-b4d7-704c245d6362}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DefaultSignalisation" Id="{42ef2494-bd92-4bbe-a3c3-1530133fe222}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC DefaultSignalisation
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Components.Q1_AttentionSignalisationR.Reset();
Components.Q2_AttentionSignalisationG.Reset();
Components.Q3_AttentionSignalisationB.Reset();

_blinker(inOffTime:=_config.BlinkTime,inOnTime:=_config.BlinkTime);

IF NOT _status.OutBufferFull 
	AND NOT _status.EntryBufferEmpty THEN
	Components.Q2_AttentionSignalisationG.Set();
ELSIF  _blinker.IsOn THEN
	IF inDoorOpen AND 
		THIS^._feedNewBlisterTask.Busy
		OR
		THIS^._throwBlisterTask.Busy
		OR
		THIS^._hanldeOutBufferTask.Busy THEN
		Messenger.Warning('<#CAKANIE NA OBSLUHU PALETIZERA - ZAVRITE DVERE!#>');
		Components.Q1_AttentionSignalisationR.Set();
		Components.Q2_AttentionSignalisationG.Set();
	ELSIF NOT _status.OutBufferFull
		AND _status.EntryBufferEmpty
		AND _status.BlisterReady THEN
		
		Components.Q1_AttentionSignalisationR.Set();
		Components.Q2_AttentionSignalisationG.Set();

	ELSIF NOT _status.OutBufferFull
		AND _status.EntryBufferEmpty 
		AND NOT _status.BlisterReady THEN	
		Components.Q1_AttentionSignalisationR.Set();
	ELSIF  _status.OutBufferFull  THEN
		Components.Q1_AttentionSignalisationR.Set();	
	
	END_IF;


	
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="FeedNewBlisterTask" Id="{b1f890b8-a6a9-449f-bb33-681f7c5f6106}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY FeedNewBlisterTask : REFERENCE TO TcoFeedingSequenceTask
]]></Declaration>
      <Get Name="Get" Id="{e90633ff-cb89-4373-b487-6cb33e0d1de7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[FeedNewBlisterTask ref=_feedNewBlisterTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HandleOutBufferTask" Id="{28e0a013-4028-44bb-9b09-888d2756c92e}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY HandleOutBufferTask : REFERENCE TO TcoFeedingSequenceTask
]]></Declaration>
      <Get Name="Get" Id="{daefbcdb-9b4d-4f1a-806a-c8949366d1d4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HandleOutBufferTask ref=_hanldeOutBufferTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Restore" Id="{9f731c5e-ae6d-48a7-aa4c-79f4ddc4378e}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.	
		</summary>			
	</docu>	
~*)
METHOD  Restore : ITcoRestorable


]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_hanldeOutBufferTask.Restore();
_feedNewBlisterTask.Restore();
_throwBlisterTask.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SafetyBlockingMovements" Id="{f6c7e011-9d48-4ef3-b4b8-e66e2904e615}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC SafetyBlockingMovements
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//********************SAFETY******************

Components.P4_FeedEntryBlister.SuspendMoveWorkExpression(NOT Components.P7_SupportEntryBlister.AtHome ,'Movement is blocked due P7 is not in home position');
Components.P4_FeedEntryBlister.SuspendMoveHomeExpression(NOT Components.P6_VerticalSepareOutBlister.AtHome,'Movement is blocked due P6 is not in home position');
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SequenceIncomingBlister" Id="{8084b1e1-40b9-418e-9e58-2077e64d59f9}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD SequenceIncomingBlister
VAR_INPUT
	refSequenceTask : REFERENCE TO TcoFeedingSequenceTask;
	
	
END_VAR

VAR
    seq    : REFERENCE TO TcoCore.TcoSequence;


END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[seq REF= refSequenceTask.Sequence;

seq.Open();
seq.Observer := refSequenceTask.Observer;



		



//***************************************************************************************************     
//    This step will be executed and immediately finished, as the condition in Await method is true.
IF seq.Step(0,TRUE,'<#INIT#>') THEN   
	Messenger.Warning('<#BEZPECNOST ZARIADENIA NARUSENA. NIEJE MOZNE VYKONAT AKCIU#>');     
	IF _status.SafeCondition THEN
    	seq.CompleteStep();
	END_IF;
END_IF        
//***************************************************************************************************     

 
//***************************************************************************************************     
IF seq.Step(10,TRUE,'<#KONTROLA POCTU VSTUPNYCH BLISTROV#>') THEN   
    Messenger.Warning('<#PODAVAC PRAZDNY! DOPLNE VSTUPNE BLISTRE !#>');
    seq.StepCompleteWhen(Components.I3_PresentBlistersInBufferEmpty.IsTrue);
END_IF        
//***************************************************************************************************     


        
//***************************************************************************************************     
IF seq.Step(20,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - VERTIKALNE VALCE VYSUNUTE#>') THEN   

    seq.StepCompleteWhen(THIS^.Components.P1_VerticalSepareEntryBlisters.MoveToWork().Done AND THIS^.Components.P2_VerticalSepareEntryBlisters.MoveToWork().Done);
END_IF        
//***************************************************************************************************     


//***************************************************************************************************     
IF seq.Step(30,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - SEPAROVANIE ZASUNUTE#>') THEN   

    seq.StepCompleteWhen(THIS^.Components.P3_HorizontalSepareEntryBlisters.MoveToHome().Done);
END_IF        
//***************************************************************************************************     


//***************************************************************************************************     
IF seq.Step(40,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - VERTIKALNE VALCE ZASUNUT JEDEN#>') THEN   

    seq.StepCompleteWhen(THIS^.Components.P1_VerticalSepareEntryBlisters.MoveToHome().Done AND_THEN THIS^.Components.P2_VerticalSepareEntryBlisters.MoveToWork().Done);
END_IF        
//***************************************************************************************************     


//***************************************************************************************************     
IF seq.Step(50,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - SEPAROVANIE VYSUNUTE#>') THEN   

    seq.StepCompleteWhen(THIS^.Components.P3_HorizontalSepareEntryBlisters.MoveToWork().Done AND (Components.P10_HoldEntrySepareOutBlister.MoveToWork().Done or _config.SepareBlistersAtEntryInactive));
END_IF        
//***************************************************************************************************     

//***************************************************************************************************     
IF seq.Step(60,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - VERTIKALNE VALCE ZASUNUT OBIDVA#>') THEN   

    seq.StepCompleteWhen(THIS^.Components.P1_VerticalSepareEntryBlisters.MoveToHome().Done AND THIS^.Components.P2_VerticalSepareEntryBlisters.MoveToHome().Done 
						AND_THEN (Components.P10_HoldEntrySepareOutBlister.MoveToHome().Done) OR _config.SepareBlistersAtEntryInactive);
END_IF        
//***************************************************************************************************     

//***************************************************************************************************   
IF seq.Step(70,TRUE,'<#KONTROLA PRITOMNOSTI SEPAROVANEHO KUSU#>') THEN   
    Messenger.Error('<#PODAVAC PRAZDNY! DOPLNE BLISTRE !#>');
    seq.StepCompleteWhen(THIS^.Components.I1_PresentBlisterEntry.IsTrue AND (THIS^.Components.I2_PresentBlisterEntryEmptySpace.IsTrue) );
END_IF        
//***************************************************************************************************     


//***************************************************************************************************     
IF seq.Step(80,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - PRESUNUTIE BLISTRA DO POZICIE ODOBERANIA#>') THEN   

    seq.StepCompleteWhen(THIS^.Components.P8_FixEntryBlisterSide.MoveToHome().Done AND_THEN THIS^.Components.P4_FeedEntryBlister.MoveToWork().Done AND Components.i4_PresentBlisterInWorkingPos.IsTrue);
END_IF        
//***************************************************************************************************     


//***************************************************************************************************     
IF seq.Step(90,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - UPEVENIE BLISTRA ZBOKU#>') THEN   

    seq.StepCompleteWhen(THIS^.Components.P8_FixEntryBlisterSide.MoveToWork().Done);
END_IF        
//***************************************************************************************************     



//***************************************************************************************************     
IF seq.Step(100,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - NPRESUNUTIE BLISTRA DO POZICIE NABERANIA#>') THEN   

   IF THIS^.Components.P6_VerticalSepareOutBlister.AtHome THEN
	    seq.CompleteStep();
	ELSE
		Messenger.Error('VYSTUPNY BUFFER NIEJE V HORNEJ POZICII!(P6)');
	END_IF
END_IF        
//***************************************************************************************************   

//***************************************************************************************************     
IF seq.Step(110,TRUE,'<#SEPAROVANIE VSTUPNEHO BLISTRA - ZASUNUTE P4#>') THEN   

	 seq.StepCompleteWhen(THIS^.Components.P4_FeedEntryBlister.MoveToHome().Done) ;
	
END_IF        
//***************************************************************************************************   


//***************************************************************************************************     
IF seq.Step(120,TRUE,'SEPAROVANIE VSTUPNEHO BLISTRA - NPRESUNUTIE BLISTRA DO POZICIE NABERANIA') THEN   

    seq.StepCompleteWhen(THIS^.Components.P7_SupportEntryBlister.MoveToWork().Done AND (THIS^.Components.P9_LockEntryBlisterTop.MoveToHome().Done OR _config.LockBlisterInPickPosInactive));
END_IF        
//***************************************************************************************************   




IF (seq.Step(inStepID := seq.RESTORE_STEP_ID,
    inEnabled := TRUE,
    inStepDescription := 'RETURN TO THE START OF THE SEQUENCE')) THEN
    //--------------------------------------------------------	
		refSequenceTask.DoneWhen(TRUE);
    	seq.CompleteSequence();
    //--------------------------------------------------------			
END_IF;

seq.Close();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SequenceOutgoingBlister" Id="{e43609b6-404e-4880-bc40-3f63b80daf89}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD SequenceOutgoingBlister
VAR_INPUT
	refSequenceTask : REFERENCE TO TcoFeedingSequenceTask;
	
	
END_VAR

VAR
    seq    : REFERENCE TO TcoCore.TcoSequence;

END_VAR

VAR_INST
	_timer:ton;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[seq REF= refSequenceTask.Sequence;

seq.Open();
seq.Observer := refSequenceTask.Observer;



		



//***************************************************************************************************     
//    This step will be executed and immediately finished, as the condition in Await method is true.
IF seq.Step(0,TRUE,'<#INIT#>') THEN   
	Messenger.Warning('<#BEZPECNOST ZARIADENIA NARUSENA. NIEJE MOZNE VYKONAT AKCIU#>');     
	IF _status.SafeCondition THEN
    	seq.CompleteStep();
	END_IF;
END_IF        
//***************************************************************************************************     

IF seq.Step(10,TRUE,'<#SEPAROVANIE VYSTUPNEHO BLISTRA - UVOLNENIE BLISTRA#>') THEN   

    seq.StepCompleteWhen( (THIS^.Components.P9_LockEntryBlisterTop.MoveToWork().Done OR _config.LockBlisterInPickPosInactive) AND THIS^.Components.P8_FixEntryBlisterSide.MoveToHome().Done);
END_IF        
//***************************************************************************************************   


//***************************************************************************************************     
IF seq.Step(20,TRUE,'<#SEPAROVANIE VYSTUPNEHO BLISTRA - ZASUNUTIE SUPPORTU#>') THEN   

   seq.StepCompleteWhen(THIS^.Components.P7_SupportEntryBlister.MoveToHome().Done);
END_IF        
//***************************************************************************************************   



//***************************************************************************************************     
IF seq.Step(30,TRUE,'<#SEPAROVANIE VYSTUPNEHO BLISTRA - KONTROLA PRITOMNOSTI BLISTA NA SKLZE#>') THEN   
	IF seq.IsFreshState THEN
		_timer(IN:=FALSE);
	END_IF
	_timer(IN:=THIS^.Components.I5_OutBlistersIsThrowedCorrectly.Signal,PT:=_config.StabilisationTime);
	
    seq.StepCompleteWhen(_timer.Q);
END_IF        
//***************************************************************************************************   



IF (seq.Step(inStepID := seq.RESTORE_STEP_ID,
    inEnabled := TRUE,
    inStepDescription := 'RETURN TO THE START OF THE SEQUENCE')) THEN
    //--------------------------------------------------------	
		refSequenceTask.DoneWhen(TRUE);
    	seq.CompleteSequence();
    //--------------------------------------------------------			
END_IF;

seq.Close();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SequenceOutgoingBuffer" Id="{e9336603-a605-4174-8666-a14b03ad4f7f}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD SequenceOutgoingBuffer
VAR_INPUT
	refSequenceTask : REFERENCE TO TcoFeedingSequenceTask;
	
	
END_VAR

VAR
    seq    : REFERENCE TO TcoCore.TcoSequence;

END_VAR

VAR_INST
	_timer:ton;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[seq REF= refSequenceTask.Sequence;

seq.Open();
seq.Observer := refSequenceTask.Observer;



		



//***************************************************************************************************     
//    This step will be executed and immediately finished, as the condition in Await method is true.
IF seq.Step(0,TRUE,'<#INIT#>') THEN   
	Messenger.Warning('<#BEZPECNOST ZARIADENIA NARUSENA. NIEJE MOZNE VYKONAT AKCIU#>');     
	IF _status.SafeCondition THEN
    	seq.CompleteStep();
	END_IF;
END_IF        
//***************************************************************************************************     



//***************************************************************************************************     
IF seq.Step(10,TRUE,'<#VYSTUPNY BUFFER - KONTROLA PRITOMNOSTI BLISTA NAD BUFFEROM#>') THEN   
	IF seq.IsFreshState THEN
		_timer(IN:=FALSE);
	END_IF
	_timer(IN:=NOT THIS^.Components.I5_OutBlistersIsThrowedCorrectly.Signal AND Components.I7_OutBlistersIsAboveOutBuffer.Signal,PT:=_config.StabilisationTime);
	
    seq.StepCompleteWhen(_timer.Q);
END_IF        
//***************************************************************************************************   


//***************************************************************************************************     
IF seq.Step(20,TRUE,'<#VYSTUPNY BUFFER - KONTROLA POSCTU BLISTROV#>') THEN   
	Messenger.Error('<#PODAVAC PLNY! ODSTRANTE PRAZDNE BLISTRE !#>');
    seq.StepCompleteWhen(THIS^.Components.I8_OutBlistersBufferIsFull.IsFalse);
END_IF        
//***************************************************************************************************   


//***************************************************************************************************     
IF seq.Step(30,TRUE,'<#VYSTUPNY BUFFER - POSUN KUSOV NAD BUFFER#>') THEN   

	THIS^.Components.P6_VerticalSepareOutBlister.MoveToWork();
	IF Components.I6_OutBlistersLisftSignal.Signal THEN
	
		THIS^.Components.P6_VerticalSepareOutBlister.MoveWorkTask.Abort();
	    seq.StepCompleteWhen(TRUE);
	END_IF;
		
END_IF        
//***************************************************************************************************   


//***************************************************************************************************     
IF seq.Step(40,TRUE,'<#VYSTUPNY BUFFER - UVOLNENIE BLISTRA A NAVRAT NAHOR#>') THEN   

	
	seq.StepCompleteWhen(Components.P5_HorizontalSepareOutBlisters.MoveToWork().Done AND_THEN THIS^.Components.P6_VerticalSepareOutBlister.MoveToHome().Done);
		
END_IF        
//***************************************************************************************************   

//***************************************************************************************************     
IF seq.Step(50,TRUE,'<#VYSTUPNY BUFFER - HORIZONTALNE ZASUNUTIE#>') THEN   

	
	seq.StepCompleteWhen(Components.P5_HorizontalSepareOutBlisters.MoveToHome().Done);
		
END_IF        
//***************************************************************************************************   



IF (seq.Step(inStepID := seq.RESTORE_STEP_ID,
    inEnabled := TRUE,
    inStepDescription := 'RETURN TO THE START OF THE SEQUENCE')) THEN
    //--------------------------------------------------------	
		refSequenceTask.DoneWhen(TRUE);
    	seq.CompleteSequence();
    //--------------------------------------------------------			
END_IF;

seq.Close();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{d6789683-1857-454b-855b-b71fdc95539f}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
		    Custom service (manual, maintenance) logic.
			This method must be implemented in derived class.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED  ServiceMode
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_components.Q3_AttentionSignalisationB.Service();
_components.Q2_AttentionSignalisationG.Service();
_components.Q1_AttentionSignalisationR.Service();
_components.P1_VerticalSepareEntryBlisters.Service();
_components.P2_VerticalSepareEntryBlisters.Service();
_components.P3_HorizontalSepareEntryBlisters.Service();
_components.P4_FeedEntryBlister.Service();
_components.P5_HorizontalSepareOutBlisters.Service();
_components.P6_VerticalSepareOutBlister.Service();
_components.P7_SupportEntryBlister.Service();
_components.P8_FixEntryBlisterSide.Service();
_components.P9_LockEntryBlisterTop.Service();
_components.P10_HoldEntrySepareOutBlister.Service();
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{4f7c09e9-b9d2-4b30-879c-67a0c1d3ae52}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the status of the MTS Pls feeder. 					
		</summary>			
	</docu>	
~*)
PROPERTY Status : REFERENCE TO TcoPlsPaletizator_Status_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{b88e2ff8-e862-4b0e-a96c-bb4d6c1ba00f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ThrowBlisterTask" Id="{6c05fc74-a894-4d71-9cc9-8b901d635244}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY ThrowBlisterTask : REFERENCE TO TcoFeedingSequenceTask
]]></Declaration>
      <Get Name="Get" Id="{051ea58b-2014-4589-b17a-f2406721db2a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ThrowBlisterTask ref=_throwBlisterTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>