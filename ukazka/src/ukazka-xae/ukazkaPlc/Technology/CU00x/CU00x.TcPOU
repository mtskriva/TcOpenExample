<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="CU00x" Id="{c8fb8f62-fa26-41d3-a5d2-3cc70d4e8555}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute addProperty ShortName "CU00x"}
{attribute addProperty Name "Controlled unit x_tempalte_x"}
FUNCTION_BLOCK CU00x EXTENDS CUBase 
VAR
    _cuProcessDataDisplay       :  CU00xProcessData := (Parent := THIS^);
    _cuTechnologicalDataDisplay :  CU00xTechnologicalData := (Parent := THIS^);
    _components          		:  CU00xComponents := (Parent := THIS^);
	{attribute addProperty Name "<#MANUAL#>"}
    {attribute addProperty ToolTip "<#Start manual/Service mode#>"}	
    _manualTask : CU00xManualTask(THIS^);
	{attribute addProperty Name "<#GROUND#>"}
	{attribute addProperty ToolTip "<#Brings the device into basic position.#>"}
	_groundTask : CU00xGroundTask(THIS^, TcoCore.eRestoreMode.None);
	{attribute addProperty Name "<#AUTOMAT#>"}
	{attribute addProperty ToolTip "<#Starts automatic sequence. Before start you need to perform grounding sequence.#>"}	
	_automatTask : CU00xAutomatTask(THIS^, TcoCore.eRestoreMode.None);     
	{attribute addProperty Name "<#SUSPEND PROCESS#>"}
    {attribute addProperty ToolTip "<#Starts suspend sequence of process(automatic,ground sequence).#>"}	
    _suspendTask : CU00xSuspendTask(THIS^, TcoCore.eRestoreMode.None);     
	{attribute addProperty Name "<#RECOVER PROCESS#>"}
    {attribute addProperty ToolTip "<#Starts suspend sequence of process(automatic,ground sequence).#>"}	
    _recoverTask : CU00xRecoverTask(THIS^, TcoCore.eRestoreMode.None);     
  	
	{attribute addProperty Name "<#Test positions#>"}
	_positions : Cu00xTestPositions(THIS^);

	{attribute addProperty Name "<#Test multi positions#>"}
	_positionsMulti : CU00xTestMultiPositions(THIS^);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[THIS^.CuId := eStations.CU00x;



(*
	This controlled unit's component initialization.
*)

THIS^.InitializeComponents();

(*
	This controlled unit process data crud operations handler.
	Control exchange of process data between this controlled unit and the data repository.
*)

_processData();
_productionPlaner();


(*
	
	Cu's Modes
	
*)

Automat();
Ground();
Manual();


_suspendTask();
_recoverTask();







(*
	When no mode is active 'Idle' method should be called.
	'NoMode' method shouls contain code that renders this cu idle. 
*)

IF NOT (AutomatTask.Task.Busy 
		OR GroundTask.Task.Busy
		OR ManualTask.Task.Busy) 
THEN
	Idle();
END_IF



(*
	Updates this controlled unit's information for the UI.
*)


UpdateInfo();

_cuProcessDataDisplay := ProcessDataManager.Data.CU00x;
_cuTechnologicalDataDisplay := Technology.TechnologicalSettings.Data.CU00x;

_settings.WarningCycleTime:= _cuTechnologicalDataDisplay.WarningCycleTime;
_settings.ErrorCycleTime:= _cuTechnologicalDataDisplay.ErrorCycleTime;
_settings.AnyRecurringFailure:= _cuTechnologicalDataDisplay.AnyRecurringFailure;
_settings.SameRecurringFailure:= _cuTechnologicalDataDisplay.SameRecurringFailure;

]]></ST>
    </Implementation>
    <Folder Name="Modes" Id="{f2e5cf24-1514-087a-1cf3-de6536a0a637}" />
    <Folder Name="Tasks" Id="{302f9569-31ae-0533-24c6-3275279929c8}" />
    <Method Name="Automat" Id="{70658337-2958-0404-37fd-9b138cbacdfa}" FolderPath="Modes\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Controls `automatic` mode of `CU00x`.
		</summary>
	</docu>
~*)
METHOD Automat
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	Enable condition to start `automatTask`.
	Modify according your needs.
	[! 
	THIS IS NOT SAFETY CONDITION. THE SAFETY OF PRESONNEL AND EQUIPMENT MUST BE ENSURED BY ADDITIONAL MEANS 
	TO COMPLY WITH REGULATIONS
	]
*)


//_automatTask.Task.Enabled := (_groundTask.GroundDone OR  _automatTask.Task.Busy) AND THIS^.Technology.AllowAutomat();

(*
	Invokes `groundTask` from technology object.
*)

//IF(Technology.AutomatAllTask.Execute()) THEN _automatTask.Task.Invoke(); END_IF;

//IF(Technology.ForceStepMode()) THEN
 //	_automatTask.ModeController.Mode := eSequencerMode.StepMode;
//END_IF 



(*
	or use default behavior from abstraction
*)
	SUPER^.Automat();

(*

	Executes sequence of automatic mode.

*)

_automatTask();]]></ST>
      </Implementation>
    </Method>
    <Property Name="AutomatTask" Id="{395ce4fa-38ae-46a5-9c91-86a9f1bcbbc2}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY AutomatTask : REFERENCE TO CUBaseAutomat]]></Declaration>
      <Get Name="Get" Id="{ca2cc00e-064b-48f3-a4fa-26832ebfc11a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AutomatTask REF= _automatTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Components" Id="{7133061c-46ce-4913-b91f-5deb41132b8c}">
      <Declaration><![CDATA[PROPERTY Components : REFERENCE TO CU00xComponents]]></Declaration>
      <Get Name="Get" Id="{d34691d4-caf0-4f1c-9ccf-b26a123c3f8f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Components REF= _components;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Ground" Id="{7656a7d5-b5cf-0112-2af9-f331cc560782}" FolderPath="Modes\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Controls `ground` mode of `CU00x`.
		</summary>
	</docu>
~*)
METHOD Ground : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	Enable condition to start `groundTask`.
	Modify according your needs.
	[! 
	THIS IS NOT SAFETY CONDITION. THE SAFETY OF PRESONNEL AND EQUIPMENT MUST BE ENSURED BY ADDITIONAL MEANS 
	TO COMPLY WITH REGULATIONS
	]
*)

//_groundTask.Task.Enabled :=  THIS^.Technology.AllowGround();

(*
	Invokes `groundTask` from technology object.
*)

//IF(Technology.GroundAllTask.Execute()) THEN _groundTask.Task.Invoke(); END_IF;


//IF _groundTask.GroundDone AND _groundTask.Task.Execute() THEN _groundTask.Restore();_groundTask.Task.Invoke();END_IF;


(*
	or use default behavior from abstraction
*)
	SUPER^.Ground();




(*

	Executes sequence of groundTask.

*)

_groundTask();]]></ST>
      </Implementation>
    </Method>
    <Property Name="GroundTask" Id="{49f8c54b-7096-4ee9-be7f-1b5b62c4c097}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY GroundTask : REFERENCE TO CUBaseGround]]></Declaration>
      <Get Name="Get" Id="{8480f5d4-4535-49b0-b4be-60aa7bf89b76}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[GroundTask REF= _groundTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Idle" Id="{83cfb354-866f-0f83-2445-735ead10a56a}" FolderPath="Modes\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Code to be called cylically when `CU00x` idle; no other mode is active.
		</summary>
	</docu>
~*)
METHOD Idle : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitializeComponents" Id="{5a5fba3f-8ac9-4756-a6a5-163b8c66ad67}">
      <Declaration><![CDATA[METHOD InitializeComponents : BOOL

VAR_INST
	tempBoolHome: BOOL;
	tempBoolWork: BOOL;
	tempBoolP4Home: BOOL;
	tempBoolP4Work: BOOL;

END_VAR
VAR

	Output: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_components.VerticalPiston(inoAtHomePos:= GVL_iXlinker.IN.Channel_1.Input
, inoAtWorkPos := GVL_iXlinker.IN.Channel_2.Input,
	inoToHomePos := GVL_iXlinker.OUT.Channel_1.Output, inoToWorkPos := GVL_iXlinker.OUT.Channel_2.Output);
	
_components.HorizontalPiston(inoAtHomePos:= GVL_iXlinker.IN.Channel_5.Input, inoAtWorkPos := GVL_iXlinker.IN.Channel_6.Input,
	inoToHomePos := GVL_iXlinker.OUT.Channel_3.Output, inoToWorkPos := GVL_iXlinker.OUT.Channel_4.Output);

_components.IN1(inoSignal:= GVL_iXlinker.B10_1);
_components.IN2(inoSignal:= GVL_iXlinker.IN.Channel_2.Input);
_components.IN3(inoSignal:= GVL_iXlinker.EC.EC.IA1.Channel_1.Input);

_components.OUT1(inoSignal:= GVL_iXlinker.B20_1);
_components.OUT2(inoSignal:= GVL_iXlinker.OUT.Channel_2.Output);
_components.OUT3(inoSignal:= GVL_iXlinker.EC.EC.QA1.Channel_1.Output);

(*
components.Group1.horizontalCylinder(inoAtHomePos:=GVL_iXlinker.EC1.EK1200.IA1_EL1809.Channel_1.Input, 
							   inoAtWorkPos:=GVL_iXlinker.EC1.EK1200.IA1_EL1809.Channel_2.Input, 
							   inoToHomePos:=GVL_iXlinker.EC1.EK1200.IA1_EL1809.Channel_3.Input, 
							   inoToWorkPos:=GVL_iXlinker.EC1.EK1200.IA1_EL1809.Channel_4.Input);
Components.SingleAxis.Config.InfoTime:=T#4S;
Components.SingleAxis.Config.ErrorTime:=T#10S;



Components.SingleAxis(inEnable := ,
    inEnablePositive := ,
    inEnableNegative := ,
    inCalibrationCam := ,
    refAxis := GVL_iXlinker.Axis1,
	inoPositions:= _positions);
	
	

//Components.PickAndPlace();
//Components.PickAndPlace.Service();
		
Components.MultiAxis(inEnableAxis1 := ,
    inEnablePositiveAxis1 := ,
    inEnableNegativeAxis1 := ,
    inCalibrationCamAxis1 := ,
    refAxis1 := GVL_iXlinker.Axis1,
	inoPositions:= _positionsMulti);
	
			
//Components.PickAndPlace.Components.Manipulator(inEnableAxis1 := ,
//    inEnablePositiveAxis1 := ,
//    inEnableNegativeAxis1 := ,
//    inCalibrationCamAxis1 := ,
//    refAxis1 := GVL_iXlinker.Axis1,
//	inoPositions:= _positionsMulti);
*)


]]></ST>
      </Implementation>
    </Method>
    <Method Name="Manual" Id="{f43c6193-c9c5-0244-248c-08c5ef114438}" FolderPath="Modes\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Controls `manual` mode of `CU00x`.
		</summary>
	</docu>
~*)
METHOD Manual : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	Enable condition to start `automatTask`.
	Modify according your needs.
	[! 
	THIS IS NOT SAFETY CONDITION. THE SAFETY OF PRESONNEL AND EQUIPMENT MUST BE ENSURED BY ADDITIONAL MEANS 
	TO COMPLY WITH REGULATIONS
	]
*)

	//_manualTask.Task.Enabled := THIS^.Technology.AllowManual();

	
(*
	or use default behavior from abstraction
*)
	SUPER^.Manual();
	

(*

	Executes sequence of manualTask.

*)
_manualTask();]]></ST>
      </Implementation>
    </Method>
    <Property Name="ManualTask" Id="{3362f8a1-5828-47e8-a58f-b7a215df59dc}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY ManualTask : REFERENCE TO TcoTaskedService]]></Declaration>
      <Get Name="Get" Id="{e78cfa35-d5c6-462d-8720-3fee9ea9f425}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ManualTask REF= _manualTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ProductionPlanerTask" Id="{a0863d93-88ac-4bb2-8f44-a9a36a89fe47}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY ProductionPlanerTask : REFERENCE TO ProductionPlaner]]></Declaration>
      <Get Name="Get" Id="{003a8d5c-b77b-4cd7-a636-878470fa47e3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProductionPlanerTask REF= _productionPlaner;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="RecoverTask" Id="{09a4e11e-8dff-4ff9-9a83-7a206a8f7bd4}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY RecoverTask : REFERENCE TO CUBaseRecover]]></Declaration>
      <Get Name="Get" Id="{a6ec31f2-82f9-4a8c-b280-bd0ce9c9f6f5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RecoverTask REF= _recoverTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StatusInfo" Id="{c1e64466-c2b7-4817-b7eb-dde6593385fb}">
      <Declaration><![CDATA[PROPERTY StatusInfo : REFERENCE TO CUBaseStatusInfo]]></Declaration>
      <Get Name="Get" Id="{85699701-4eff-42c1-b40d-a4f2d77266cb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StatusInfo ref= _statusInfo;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="SuspendTask" Id="{74ffab41-6ae7-4647-bbd4-26e8306f6c9e}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY SuspendTask : REFERENCE TO CUBaseSuspend]]></Declaration>
      <Get Name="Get" Id="{96504ee3-1c5b-4f92-960d-9d00d0414969}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SuspendTask REF= _suspendTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Technology" Id="{0e688a71-683a-45e9-ad1b-4b5b04f7d71e}">
      <Declaration><![CDATA[PROPERTY Technology : REFERENCE TO Technology]]></Declaration>
      <Get Name="Get" Id="{6127ba68-461c-4b3d-aa46-b1cbb1962cc4}">
        <Declaration><![CDATA[VAR
    _technology : POINTER TO Technology;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYPOINTER(Parent, _technology) THEN // Check if _Parent is Station001
    Technology REF= _technology^;              // If the check is successful dereference a pointer. simlar to THIS^ or SUPER^
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="CU00x">
      <LineId Id="3" Count="67" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.Automat">
      <LineId Id="3" Count="34" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.AutomatTask.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.Components.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.Ground">
      <LineId Id="3" Count="34" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.GroundTask.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.Idle">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.InitializeComponents">
      <LineId Id="146" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="5" Count="37" />
      <LineId Id="130" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.Manual">
      <LineId Id="3" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.ManualTask.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.ProductionPlanerTask.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.RecoverTask.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.StatusInfo.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.SuspendTask.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CU00x.Technology.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>